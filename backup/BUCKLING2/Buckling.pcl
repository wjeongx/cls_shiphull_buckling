#define CLASSNAME Buckling
#define CLASSNAME_STR "Buckling"
#include "appforms.p"
#include "lpenums.p"

$ Start

CLASS CLASSNAME
 classwide widget form_id, opt_rules, opt_object, opt_method, lstbox_result_cases, btn_option, @
                 sel_frame_elem, sel_box_elem, frame_select, sep01

 classwide widget rules_item(3), object_item(4), method_item(4), apply_id, cancel_id, frame_id

 classwide integer elem_count, elem_ids(VIRTUAL), e_count, e_ids(VIRTUAL), e_loc
 classwide real    stress(VIRTUAL)
 classwide real    sum_area, area(VIRTUAL)
 classwide real    min, max
/* DNV OPTION */
 classwide widget child_dbox(1)

   $ Start
	FUNCTION init()
	real yloc_frame
       real yloc
	
       yloc = 0.0

	form_id=ui_form_create("form",@
				 /* x location */  FORM_X_LOC , @
				 /* y location */ FORM_Y_LOC,"ul", @
				 /* width      */ FORM_WID_SML, @
				 /* height     */ FORM_HGT_TALL, @
				 /* label      */ CLASSNAME_STR,"")

	opt_rules=ui_optionmenu_create(/* parent       */  form_id, @
	  				   /* callback     */  "opt_rules_cb", @
					   /* x            */  AOM_MENU_X_LOC, @
			 		   /* y            */ ACTION_MENU_Y_LOC, @
					   /* label length */ AOM_MENU_LABEL_LEN, @
					   /* label        */ "Rules :", @
					   /*              */  false)

	rules_item(1) = ui_item_create(opt_rules,"ExportBucklingPanel","ExportBucklingPanel",true)
       rules_item(2) = ui_item_create(opt_rules,"ABSBUS","ABSBUS",true)
       rules_item(3) = ui_item_create(opt_rules,"DNVRPC201","DNVGL RPC201",true)		

       ui_wid_set(opt_rules, "VALUE", "ExportBucklingPanel")        
        
	opt_object=ui_optionmenu_create(form_id,"",@
							AOM_MENU_X_LOC, @
							OBJECT_MENU_Y_LOC, @
							AOM_MENU_LABEL_LEN, @
							"Object:", @
							FALSE)

	object_item(1)=ui_item_create(opt_object,"UNSTIFFENED","Unstiffned Panel",FALSE)

	opt_method = ui_optionmenu_create(form_id,"",                  @
					       AOM_MENU_X_LOC,		@
						METHOD_MENU_Y_LOC,    	@
						AOM_MENU_LABEL_LEN,	       @
						"Method:",			@
						false)

	method_item(1) = ui_item_create(opt_method,"CUR_VIEW", "Current View", true)
	method_item(2) = ui_item_create(opt_method,"CUR_GROUP", "Current Group", true)		
	method_item(3) = ui_item_create(opt_method,"SEL_ELEM", "Select Element", true)
	method_item(4) = ui_item_create(opt_method,"SEL_PANEL", "Select Panel", true)

	yloc += METHOD_MENU_Y_LOC + OPT_MENU_HGT_NO_LABOVE + INTER_WIDGET_SPACE

	sep01 = ui_separator_create(/* patrent  */  form_id, @
					/* callback */  "",@
					/* x        */  0, @
					/* y        */  yloc, @
					/* width    */  FORM_WID_SML, @
					true)

	yloc += INTER_WIDGET_SPACE
		
	real frame_width
		
	frame_width = FRAME_L_MARGIN + SFRAME_WID_SINGLE + FRAME_R_MARGIN
				
	yloc_frame = 0.0
				
	frame_select = ui_frame_create(form_id,"", @
					 FRAME_X_LOC_COL1, @
					 yloc, @
					 frame_width, @
					 0.0, @
	             			 "Select Element")
										 
       yloc_frame += FRAME_T_MARGIN
				
       sel_frame_elem = ui_selectframe_create(    frame_select, "", @
	             					 SFRAME_X_LOC_COL1, @
							 yloc_frame, @
							 SFRAME_WID_SINGLE, @
							 SFRAME_1SDB_HGT_NO_LABOVE, @
							 "Auto Execute", @
							 false)
				
	yloc_frame += INTER_WIDGET_SPACE
				
	sel_box_elem = ui_selectdatabox_create(sel_frame_elem,"", @
						   SFRAME_L_MARGIN, @
	             				   SFRAME_T_MARGIN, @
						   0, @
	             				   SDBOX_WID_SINGLE, @
						   "",@
						   "",false, @
						   "elem2d", "" )

       yloc_frame += SFRAME_1SDB_HGT_NO_LABOVE + INTER_WIDGET_SPACE*2
				
	ui_button_create(frame_select, @
			"CheckPanel_cb", @
			 BUTTON_HALF_X_LOC1, @
			 yloc_frame, @
			 BUTTON_WID_HALF, @
			 BUTTON_DEFAULT_HGT, @
			 "Check Panel", @
			 true,false)

	ui_button_create(frame_select,"Clear_cb", @
			   BUTTON_HALF_X_LOC2, @
	             	   yloc_frame, @
			   BUTTON_WID_HALF, @
			   BUTTON_DEFAULT_HGT, @
			   "Clear", @
			   true,false)

	yloc_frame += BUTTON_DEFAULT_HGT + INTER_WIDGET_SPACE
			
	ui_wid_set(frame_select, "HEIGHT", yloc_frame)
				
	real frame_height
				
	ui_wid_get(frame_select, "HEIGHT", frame_height)
				
	yloc += frame_height + INTER_WIDGET_SPACE
		
	ui_separator_create(/* patrent  */  form_id, @
				/* callback */  "",@
				/* x        */  0, @
       			/* y        */  yloc, @
				/* width    */  FORM_WID_SML, @
						true)

       yloc += INTER_WIDGET_SPACE
		
	lstbox_result_cases = ui_listbox_create(form_id,"", @
              					 FRAME_L_MARGIN, @
							 yloc, @
							 LBOX_WID_SINGLE,@
							 8, @
							 "Result Cases", @
							 "extend", @
							 true)

	yloc += LBOX_8L_HGT_LABOVE + INTER_WIDGET_SPACE	

	apply_id = ui_button_create(form_id,"apply_cb", @
					   BUTTON_HALF_X_LOC1, @
					   yloc, @
					   BUTTON_WID_HALF, @
					   BUTTON_DEFAULT_HGT, @
	             			   "Apply", @
					   true,false)

	cancel_id = ui_button_create(form_id,"cancel_cb", @
					  BUTTON_HALF_X_LOC2, @
					  yloc, @
					  BUTTON_WID_HALF, @
					  BUTTON_DEFAULT_HGT, @
					  "Cancel", @
					  true,false)

END FUNCTION
$ End

function dnv_option(yloc1)

          real yloc1

          yloc1 += INTER_WIDGET_SPACE

          string dbox_labels[32](1) = ["Material factor : "]
          string dtypes[32](1) = ["real"]
          string callbacks[32](1) = [""]
          
          frame_id = ideas_databox_set(form_id, "DNV Option", 1 , child_dbox, dbox_labels, dtypes, callbacks, false, yloc1)
          
          ui_wid_set(frame_select, "Y", yloc1)
          
 		real widhgt
		ui_wid_get(frame_select, "HEIGHT", widhgt)
		yloc1 += widhgt + INTER_WIDGET_SPACE
		ui_wid_set(sep01, "Y", yloc1)
		yloc1 += INTER_WIDGET_SPACE
          ui_wid_set(lstbox_result_cases, "Y", yloc1)
		ui_wid_get(lstbox_result_cases, "HEIGHT", widhgt)
		yloc1 += widhgt + INTER_WIDGET_SPACE
          ui_wid_set(apply_id, "Y", yloc1)           
          ui_wid_set(cancel_id, "Y", yloc1)           
      
    end function

  
     function abs_option(yloc1)
    
          real yloc1

          yloc1 += INTER_WIDGET_SPACE

          string dbox_labels[32](1) = ["Material factor : "]
          string dtypes[32](1) = ["real"]
          string callbacks[32](1) = [""]
          
          frame_id = ideas_databox_set(form_id, "ABS Option", 1 , child_dbox, dbox_labels, dtypes, callbacks, false, yloc1)

          ui_wid_set(frame_select, "Y", yloc1)

          real widhgt
		ui_wid_get(frame_select, "HEIGHT", widhgt)
		yloc1 += widhgt + INTER_WIDGET_SPACE
		ui_wid_set(sep01, "Y", yloc1)
		yloc1 += INTER_WIDGET_SPACE		
          ui_wid_set(lstbox_result_cases, "Y", yloc1)
		ui_wid_get(lstbox_result_cases, "HEIGHT", widhgt)
		yloc1 += widhgt + INTER_WIDGET_SPACE
          ui_wid_set(apply_id, "Y", yloc1)           
          ui_wid_set(cancel_id, "Y", yloc1)                   
    
    end function

	$ Start
	FUNCTION display()

		ui_form_display(CLASSNAME_STR)
		udf_load_result_cases(lstbox_result_cases)
		
	END FUNCTION
	$ End

	$ Start
	FUNCTION cancel_cb()

	   ui_form_hide(CLASSNAME_STR)

	END FUNCTION
	$ End

    function opt_rules_cb(s_action_item)
      string s_action_item[]
      string rules[32]

      ui_wid_get(opt_rules, "VALUE", rules)

      real ylocx = 0.

      switch(rules )
      
        case("ExportBucklingPanel")
       
        case("ABSBUS")
          if(ui_wid_exists(frame_id)== true)then
                ui_wid_delete(frame_id)
          end if
            ylocx += METHOD_MENU_Y_LOC + OPT_MENU_HGT_NO_LABOVE + INTER_WIDGET_SPACE
            ylocx += INTER_WIDGET_SPACE
            CLASSNAME.abs_option(ylocx)
        case("DNVRPC201")
          if(ui_wid_exists(frame_id)== true)then
                ui_wid_delete(frame_id)
          end if        
            ylocx += METHOD_MENU_Y_LOC + OPT_MENU_HGT_NO_LABOVE + INTER_WIDGET_SPACE
            ylocx += INTER_WIDGET_SPACE
            CLASSNAME.dnv_option(ylocx)
        default
      
      end switch

    end function

  
	/* ====================================================
		apply button callback
	  ====================================================== */
	FUNCTION CheckPanel_cb()
		ui_exec_function("chkPnlMethod","display")
	END FUNCTION
	
	$ Start
	FUNCTION apply_cb()
     	integer status
     	string select_option[15]
     	string s_ElemList[virtual]
     	string group_name[63]
     	integer group_id, num_elems, ia_elem_id(virtual)
     	integer i_count, idx, panel_ids(virtual)
     	string sa_ElemList[4096](virtual)
     	real ra_PanelInfo(virtual)

/*	
		ui_wid_get(opt_method, "value", select_option)
		
		switch (select_option)
			case("CUR_VIEW");
			
			case("CUR_GROUP");
			
				db_get_current_group_id(group_id)
				db_count_elems_in_group ( group_id, num_elems )
				sys_allocate_array(ia_elem_id, 1, num_elems)
				db_get_elem_ids_in_group ( num_elems, group_id, ia_elem_id )
				app_int_array_to_vstring("Element", num_elems, ia_elem_id, s_ElemList)
			
			case("SEL_ELEM");
				ui_wid_get_vstring(sel_box_elem, "value", s_ElemList)
			
			case("SEL_PANEL");
				ui_wid_get_vstring(sel_box_elem, "value", s_ElemList)
				$ ABS_Buckling.get_panel_stress()
		end switch
*/		

		db_get_current_group_id(group_id)
              db_get_group_name(group_id,group_name)
		db_count_elems_in_group ( group_id, num_elems )
		sys_allocate_array(ia_elem_id, 1, num_elems)
		db_get_elem_ids_in_group ( num_elems, group_id, ia_elem_id )
		app_int_array_to_vstring("Element", num_elems, ia_elem_id, s_ElemList)
                     		
              setPanel.getPanel(-1, s_ElemList, i_count, panel_ids, sa_ElemList, ra_PanelInfo)
		
		integer ncases
		
		ui_wid_get(lstbox_result_cases, "NSELECTED", ncases)
		
		string rcList[63](virtual)
		sys_allocate_array(rcList, 1, ncases)
		
		ui_wid_get(lstbox_result_cases, "VALUE", rcList)
		
		CLASSNAME.get_panel_stress2( group_name, rcList, panel_ids, sa_ElemList, ra_PanelInfo )
		
		/*
		for(idx=1 to i_count)
			dump ra_PanelInfo(idx,1:7)
		end for
		*/
              /* ra_PanelInfo(1): span  -a
               * ra_PanelInfo(2): space -b
               * ra_PanelInfo(3): angle
               * ra_PanelInfo(4): projected Coordinate (1 or 2)
		 * ra_PanelInfo(5:7) Coordinate of Panel Center) 
		 */
			
		$ real usr_inform(11)
		
		$ make_panel_inform.ABS_Buckling_input( load_case, panel_ids, sa_ElemList, ra_PanelInfo, usr_inform )
		
		$for(idx=1 to ncases)
		$	dump rcList(idx)
		$end for
		
	END FUNCTION
	$ End
	
	$ Start
	FUNCTION chkPanel_cb()

	END FUNCTION
	$ END
	
	$ Start
	FUNCTION Clear_cb()
		UTL_drawClear()
		repaint_graphics()
       $       display_cleanup()
	END FUNCTION
       
FUNCTION get_panel_stress2( group_name, result_case, pnl_ids, elm_list, pnl_inform)
 STRING   group_name[]
 STRING   result_case[]()
 INTEGER  pnl_ids()
 STRING   elm_list[]()
 REAL     pnl_inform()
 $ REAL     usr_inform()

 INTEGER  pnl_count
 INTEGER  loadcase_count
 INTEGER  projected_cid_dir
 REAL     thickness, angle
 REAL     pnl_stress(VIRTUAL)
 STRING   fname[1024]
 INTEGER  fid
 INTEGER  integer_data(2)
 REAL     real_data(9)
 INTEGER  i, j
 REAL     SIGMA_H

loadcase_count = sys_array_hbound(result_case, 1)

string load_case[63](virtual)
string sub_case[63](virtual)

sys_allocate_array(load_case, 1, loadcase_count)
sys_allocate_array(sub_case, 1, loadcase_count)

integer idx
		
for(idx=1 to loadcase_count)
	load_case(idx) = str_token(result_case(idx), ",", 1)
	sub_case(idx) = str_token(result_case(idx), ",", 1)
end for

integer loadcase_ids(virtual)
integer subcases_ids(virtual)

sys_allocate_array( loadcase_ids, 1, loadcase_count )
sys_allocate_array( subcases_ids, 1, loadcase_count )

FOR ( i=1 TO loadcase_count)
      db_get_load_case_id(load_case(i), loadcase_ids(i))
END FOR
 
pnl_count = sys_array_hbound( pnl_ids, 1 )

 file_build_fname("./",group_name,"dat","N",fname)
 text_open(fname, "NOW",0,0,fid)

 /*
 text_write_string(fid,"#User Data"//" : DNV, "//sys_date()//", "//sys_time())
 text_write(fid,"Yield strength              : %F%", 0, usr_inform(1), "")
 text_write(fid,"Modulus of elasticity       : %F%", 0, usr_inform(2), "")
 text_write(fid,"Plate boundary stiffening   : %F%", 0, usr_inform(3), "")
 text_write(fid,"Cut out edge stiffening     : %F%", 0, usr_inform(4), "")
 text_write(fid,"Eta sigma                   : %F%", 0, usr_inform(5), "")
 text_write(fid,"Eta tau                     : %F%", 0, usr_inform(6), "")
 text_write(fid,"Eta xy                      : %F%", 0, usr_inform(7), "")
 text_write(fid,"Plate part of double bottom : %F%", 0, usr_inform(8), "")
 text_write(fid,"Allowable elastic buckling  : %F%", 0, usr_inform(9), "")
 text_write(fid,"Corrosionmargin            : %F%", 0, usr_inform(10), "")
 text_write(fid,"Safety factor TO be         : %F%", 0, usr_inform(11), "")
*/
 text_write(fid,"%I%", pnl_count, 1., "")
 text_write(fid,"%I%", loadcase_count, 1., "")

 extractStress.doit(loadcase_ids, elm_list, elem_count, elem_ids, stress)

 integer status

 FOR ( i=1 TO pnl_count )

      ui_writec( "Panel Checking Status : %d/%d", i, pnl_count)

      $get_ids_from_entity_list( elm_list(i), "ELEMENT", e_count, e_ids )
	  
	  e_count = fem_u_count_id_list(LP_SUBLIST_ELEMENT, elm_list(i), false, status)
	  sys_allocate_array(e_ids, 1, e_count)
	  fem_u_get_id_list(LP_SUBLIST_ELEMENT, elm_list(i), e_count, TRUE, e_ids)
	   
      CLASSNAME.get_pnl_area()

      CLASSNAME.get_thickness( thickness )

      FOR ( j=1 TO loadcase_count )

           CLASSNAME.get_pnl_stress( j, pnl_stress )

           angle = pnl_inform(i,3)

           IF ( angle > 0. ) THEN
                CLASSNAME.stress_transform( pnl_stress, angle )
           END IF

           CLASSNAME.consider_compression( pnl_stress )

          $ calculation Hull girder stress
           SIGMA_H = 0.0

          $ write input data TO file
           integer_data(1)  = pnl_ids(i)
           integer_data(2)  = loadcase_ids(j)

           real_data(1)     = pnl_inform(i,1)
           real_data(2)     = pnl_inform(i,2)
           real_data(3)     = thickness
           real_data(4)     = 0.
           real_data(5)     = 0.
           real_data(6)     = pnl_stress(1)
           real_data(7)     = pnl_stress(2)
           real_data(8)     = pnl_stress(3)
           real_data(9)     = SIGMA_H

           text_write(fid,"%2(%I4% )%%5(%F8.3% )%%4(%E13.7% )%", integer_data, real_data, "")
           text_write_string(fid, elm_list(i))

           SYS_FREE_ARRAY(pnl_stress)

      END FOR

      e_count = 0
      SYS_FREE_ARRAY(e_ids)

 END FOR

 text_close(fid,"")

 return 0

END FUNCTION

FUNCTION consider_compression( pnl_stress )
 REAL     pnl_stress()
 INTEGER  i

 FOR ( i=1 TO 2 )

      IF ( pnl_stress(i) > 0 ) THEN
           pnl_stress(i) = 0.
      ELSE
           pnl_stress(i) = mth_abs( pnl_stress(i) )
      END IF

 END FOR

 RETURN 0

END FUNCTION

FUNCTION get_pnl_stress( lc_idx, pnl_stress )

 INTEGER  lc_idx
 REAL     pnl_stress()
 INTEGER  i
 REAL     sum_stress_xx, sum_stress_yy, sum_stress_xy

 SYS_ALLOCATE_ARRAY( pnl_stress, 1, 3 )

 sum_stress_xx = 0.
 sum_stress_yy = 0.
 sum_stress_xy = 0.

 FOR ( i=1 TO e_count )
      e_loc = mth_array_search( elem_ids, e_ids(i), FALSE )
      sum_stress_xx += stress(lc_idx, 3*e_loc-2)*area(i)
      sum_stress_yy += stress(lc_idx, 3*e_loc-1)*area(i)
      sum_stress_xy += stress(lc_idx, 3*e_loc  )*area(i)
 END FOR

 pnl_stress(1) = sum_stress_xx/sum_area
 pnl_stress(2) = sum_stress_yy/sum_area
 pnl_stress(3) = sum_stress_xy/sum_area

 RETURN 0
END FUNCTION

FUNCTION get_pnl_area()
 INTEGER  i

 SYS_ALLOCATE_ARRAY(area, 1, e_count)
 sum_area = 0.

 FOR ( i=1 TO e_count )
      get_element_area( e_ids(i), area(i) )
      sum_area += area(i)
 END FOR

 RETURN 0
END FUNCTION


FUNCTION stress_transform( pnl_stress, angle )
 REAL     pnl_stress()
 REAL     angle
 REAL     xx, yy, xy

 
 xx = pnl_stress(1) * (mth_cosd(angle))**2. + pnl_stress(2) * (mth_sind(angle))**2. + @
      2*pnl_stress(3)*mth_sind(angle)*mth_cosd(angle)

 yy = pnl_stress(1) * (mth_sind(angle))**2. + pnl_stress(2) * (mth_cosd(angle))**2. - @
      2*pnl_stress(3)*mth_sind(angle)*mth_cosd(angle)

 xy = -1.*pnl_stress(1) * mth_cosd(angle)*mth_sind(angle) + pnl_stress(2)*mth_cosd(angle)*mth_sind(angle) + @
      pnl_stress(3) * ( (mth_cosd(angle))**2. - (mth_sind(angle))**2. )

 pnl_stress(1) = xx
 pnl_stress(2) = yy
 pnl_stress(3) = xy

 RETURN 0

END FUNCTION

FUNCTION get_pnl_area()
 INTEGER  i

 SYS_ALLOCATE_ARRAY(area, 1, e_count)
 sum_area = 0.

 FOR ( i=1 TO e_count )
      get_element_area( e_ids(i), area(i) )
      sum_area += area(i)
 END FOR

 RETURN 0
END FUNCTION

FUNCTION get_thickness( t )

 REAL     t

 REAL     thick_sum = 0.
 INTEGER  i, rids(VIRTUAL)
 INTEGER  gener_elem_type, dof_set_flag, condense_flag
 INTEGER  geom_flag, form_flag, lam_flag, layer_count
 INTEGER  mat_id, material_lin, material_dir
 STRING   pName[32]
 REAL     real_array(3)
 INTEGER  data_type, material_id
 INTEGER  int_value,coord_value, node_value, field_value
 STRING   string_value[31]

$ SYS_ALLOCATE_ARRAY( thickness, 1, elem_count )
 SYS_ALLOCATE_ARRAY( rids,      1, e_count )

 db_get_region_for_elements   ( e_count, e_ids,rids)

 FOR ( i = 1 TO e_count )

      db_get_region_definition(                          @
       /* region ID        */  rids(i),                  @
       /* set name         */  pName,                    @
       /* element type ID  */  gener_elem_type,          @
       /* dof set flag     */  dof_set_flag,             @
       /* condense flag    */  condense_flag,            @
       /* geom flag        */  geom_flag,                @
       /* form flag        */  form_flag,                @
       /* lam_flag         */  lam_flag,                 @
       /* layer count      */  layer_count,              @
       /* material id      */  mat_id,                   @
       /* material linear  */  material_lin,             @
       /* material direct  */  material_dir)

      db_get_prop_value(                                 @
       /* region ID        */  rids(i),                  @
       /* word of interest */  36,                       @
       /* material ID      */  material_id,              @
       /* data type        */  data_type,                @
       /* INTEGER value    */  int_value,                @
       /* REAL array       */  real_array,               @
       /* char STRING      */  string_value,             @
       /* coord ID         */  coord_value,              @
       /* node ID          */  node_value,               @
       /* field ID         */  field_value)

      $thickness(i) = real_array(1)
      thick_sum += real_array(1)*area(i)

 END FOR

 t = thick_sum / sum_area

 SYS_FREE_ARRAY( rids )

 RETURN 0

END FUNCTION

END CLASS
$ End 

FUNCTION get_element_area( eid, area )
 INTEGER  eid, numnode
 REAL     area

 INTEGER  nid(4)
 REAL     n1(3), n2(3), n3(3), n4(3), area1, area2

 $SYS_REALLOCATE_ARRAY( nid, 1, numnode )
 db_get_elem_nodes( eid, numnode, nid )

 SWITCH ( numnode )
      CASE ( 3 )
           db_get_node(nid(1), n1)
           db_get_node(nid(2), n2)
           db_get_node(nid(3), n3)
           get_triangle_area( n1, n2, n3, area )
      CASE ( 4 )
           db_get_node(nid(1), n1)
           db_get_node(nid(2), n2)
           db_get_node(nid(3), n3)
           db_get_node(nid(4), n4)
           get_triangle_area( n1, n2, n3, area1 )
           get_triangle_area( n3, n4, n1, area2 )
           area = area1 + area2
 END SWITCH

 $ SYS_FREE_ARRAY(nid)

 RETURN 0

END FUNCTION

FUNCTION get_triangle_area( n0, n1, n2, area )

 REAL   n0(), n1(), n2()
 REAL   area

 REAL   a,b,c,s

 a = mth_sqrt( ( n0(1) - n1(1) )**2. + ( n0(2) - n1(2) )**2. + ( n0(3) - n1(3) )**2. )
 b = mth_sqrt( ( n1(1) - n2(1) )**2. + ( n1(2) - n2(2) )**2. + ( n1(3) - n2(3) )**2. )
 c = mth_sqrt( ( n2(1) - n0(1) )**2. + ( n2(2) - n0(2) )**2. + ( n2(3) - n0(3) )**2. )
 s = (a+b+c)/2.

 area = mth_sqrt( s*(s-a)*(s-b)*(s-c) )

 RETURN 0

END FUNCTION 