#define cell_hgt 0.453
#include "appforms.p"

CLASS UI_InputDataView

classwide widget mform, ss_id, btn_Apply, btn_Exit, Input_dbox
        
FUNCTION init()

real y_loc = 0.

mform = ui_form_create(	      /* callback */		"",							@
						      /*     x    */		FORM_X_LOC_MED,			@
							/*     y    */		FORM_Y_LOC_HALF_CEN,		@
							/* position */		"UL",						@
							/*   width  */         FORM_WID_MED * 1.02*1.5,		@
							/*  height  */         FORM_HGT_TALL,			@
							/*   label  */         "Load Combination Factor",		@
							/*  unused  */         "")						

y_loc += FORM_T_MARGIN

      Input_dbox =ui_databox_create(                    @
      /*    parent    */                    mform,        @
      /*   callback   */                    "input_box",                 @
      /*       x      */                    FORM_L_MARGIN,      @
      /*       y      */                    y_loc,   @
      /* label_length */                    0.0,                 @
      /*  box_length  */                   DBOX_WID_SINGLE,         @
      /*     label    */                    "Input New Value",  @
      /*     value    */                    "",              @
      /*  label_above */                    FALSE,              @
      /*   datatype   */                    "STRING",           @
      /*   num_vals   */                    1)


y_loc += DBOX_HGT_NO_LABOVE + @
              INTER_WIDGET_SPACE


y_loc += SPREADSHEET_LABEL_HGT + @
		 cell_hgt * 20 + @
              INTER_WIDGET_SPACE

       btn_Apply = ui_button_create(               @
      /* parent         */  mform,                   @
      /* callback       */  "cb_Apply",            @
      /* x position     */  BUTTON_HALF_X_LOC1,          @
      /* y position     */  y_loc,                       @
      /* width          */  BUTTON_WID_HALF,             @
      /* auto size      */  0,                           @
      /* label          */  "Apply",       @
      /* label inside   */  TRUE,                        @
      /* default        */  FALSE )

        btn_Exit           = ui_button_create(               @
      /* parent         */  mform,                   @
      /* callback       */  "cb_exit",            @
      /* x position     */  BUTTON_HALF_X_LOC2,          @
      /* y position     */  y_loc,                       @
      /* width          */  BUTTON_WID_HALF,             @
      /* auto size      */  0,                           @
      /* label          */  "Exit",       @
      /* label inside   */  TRUE,                        @
      /* default        */  FALSE )
      
y_loc += BUTTON_DEFAULT_HGT +  @
              INTER_WIDGET_SPACE

$ wid = FORM_L_MARGIN + SPREADSHEET_WID_DOUBLE + FORM_R_MARGIN

      ui_wid_set(mform, "HEIGHT", y_loc)
     
END FUNCTION

FUNCTION display()

    ui_form_display("UI_InputDataView")
    UI_InputDataView.Read_Input_Data()
        
END FUNCTION

FUNCTION cb_exit()

    ui_form_hide("UI_InputDataView")
    ui_form_delete("UI_InputDataView")

END FUNCTION

FUNCTION Read_Input_Data()
    
    	integer f_id, i_tmp
        real r_tmp
        string s_tmp[7]
        
    	text_open( "input.dat", "or", 0, 0, f_id)
    	
    	integer npanel, nloadcase
    	
        text_read(f_id, "%I%", npanel, r_tmp, s_tmp)
        text_read(f_id, "%I%", nloadcase, r_tmp, s_tmp)
        
        integer cols = 11
        integer rows
        
        rows = npanel*nloadcase
         
        integer i_value(virtual)
        sys_allocate_array(i_value, 1, rows, 1, 2)
        
        real r_value(virtual)
        sys_allocate_array(r_value, 1, rows, 1, 9)
        
        string ElementList[2048](virtual)
        sys_allocate_array(ElementList, 1, rows)
        
        string row_labels[11](virtual)
        sys_allocate_array(row_labels, 1, rows)
        
        string col_labels[11](11)
 
        col_labels(1) = "LID"
        col_labels(2) = "span-l"
        col_labels(3) = "space-s"
        col_labels(4) = "thick."
        col_labels(5) = "hole-a"
        col_labels(6) = "hole-b"
        col_labels(7) = "sig_xx"
        col_labels(8) = "sig_yy"
        col_labels(9) = "tau_xy"
        col_labels(10) = "SIGMA_H"       
        col_labels(11) = "Elements"
        
    	integer count = 0
        integer idx, idz, string_length
        string LID[7](virtual)
        string SPAN_L[63](virtual)
        string SPACE_S[63](virtual)
        string THICK[63](virtual)
        string HOLE_A[63](virtual)
        string HOLE_B[63](virtual)
        string SIGXX[63](virtual)
        string SIGYY[63](virtual)
        string TAUXY[63](virtual)
        string SIGH[63](virtual)

        sys_allocate_array(LID,1, rows)
        sys_allocate_array(SPAN_L,1, rows)
        sys_allocate_array(SPACE_S,1,rows)
        sys_allocate_array(THICK,1,rows)
        sys_allocate_array(HOLE_A,1,rows)
        sys_allocate_array(HOLE_B,1,rows)
        sys_allocate_array(SIGXX,1,rows)
        sys_allocate_array(SIGYY,1,rows)
        sys_allocate_array(TAUXY,1,rows)
        sys_allocate_array(SIGH,1,rows)
                        
        for(idx=1 to npanel)
            for(idz=1 to nloadcase)
                count +=1
    			text_read(f_id, "%2I%%9F%", i_value(count,1:2), r_value(count,1:9), s_tmp)
                row_labels(count) =  str_from_integer(i_value(count, 1))
                LID(count) = str_from_integer(i_value(count,2))
                SPAN_L(count) = str_from_real(r_value(count,1))
                SPACE_S(count) = str_from_real(r_value(count,2))
                THICK(count) = str_from_real(r_value(count,3))
                HOLE_A(count) = str_from_real(r_value(count,4))
                HOLE_B(count) = str_from_real(r_value(count,5))
                SIGXX(count) = str_from_real(r_value(count,6))
                SIGYY(count) = str_from_real(r_value(count,7))
                TAUXY(count) = str_from_real(r_value(count,8))
                SIGH(count) = str_from_real(r_value(count,9))
                
                text_read_string(f_id, ElementList(count), string_length)
    		end for
        end for

    	text_close(f_id, "")
        
        integer sheet_height
        
        sheet_height = cell_hgt * 20
            
        ss_id = ui_spread_create( /* parent       */  mform,						@
						      /* callback       */	"spread_cb",							@
						      /* x position     */	FORM_L_MARGIN,			@
						      /* y position     */	DBOX_HGT_NO_LABOVE + INTER_WIDGET_SPACE,						@
						      /* width          */	SPREADSHEET_WID_DOUBLE*1.5,	@
						      /* height         */	sheet_height,			@
						      /* label_width    */	80. * PIXEL_WID,							@
						      /* num_vis_cols   */	cols,						@
						      /* num_cols       */	cols,						@
						      /* num_rows       */	rows,						@
						      /* num_layers     */	1,							@
						      /* col_labels     */	col_labels,					@
						      /* row_labels     */	row_labels,					@
						      /* label          */  "Buckling Input Data",		@
						      /* layer_label    */  "",							@
						      /* layer_val_label*/  "",							@
						      /* selection_type */  "EXTEND" )
                              
        ui_spread_set_cells(ss_id, 1, 1, 1, rows, 1, LID   )
        ui_spread_set_cells(ss_id, 2, 1, 2, rows, 1, SPAN_L  )
        ui_spread_set_cells(ss_id, 3, 1, 3, rows, 1, SPACE_S )
        ui_spread_set_cells(ss_id, 4, 1, 4, rows, 1, THICK )
        ui_spread_set_cells(ss_id, 5, 1, 5, rows, 1, HOLE_A)
        ui_spread_set_cells(ss_id, 6, 1, 6, rows, 1, HOLE_B)
        ui_spread_set_cells(ss_id, 7, 1, 7, rows, 1, SIGXX )
        ui_spread_set_cells(ss_id, 8, 1, 8, rows, 1, SIGYY )
        ui_spread_set_cells(ss_id, 9, 1, 9, rows, 1, TAUXY )
        ui_spread_set_cells(ss_id, 10,1, 10,rows, 1, SIGH  )
        ui_spread_set_cells(ss_id, 11,1, 11,rows, 1, ElementList  )        

END FUNCTION

/*    
FUNCTION Read_Input_Data()

	integer f_id, i_tmp
    real r_tmp
    string s_tmp[7]
    
	text_open( "input.dat", "or", 0, 0, f_id)
	
	integer npanel, nloadcase
	
    text_read(f_id, "%I%", npanel, r_tmp, s_tmp)
    text_read(f_id, "%I%", nloadcase, r_tmp, s_tmp)
    
    integer idx, idz, i_value(2), string_length
    real r_value(9)
    string ElementList[2048]
            
	integer count = 0
    for(idx=1 to npanel)
        for(idz=1 to nloadcase)
			text_read(f_id, "%2I%%9F%", i_value, r_value, s_tmp)
            text_read_string(f_id, ElementList, string_length)
            count +=1
            ui_spread_row_create(ss_id, str_from_integer(i_value(1)))

            ui_spread_set_cell(ss_id, 1 ,count, 1, str_from_integer(i_value(2)))
            ui_spread_set_cell(ss_id, 2 ,count, 1, str_from_real(r_value(1)))
            ui_spread_set_cell(ss_id, 3 ,count, 1, str_from_real(r_value(2)))
            ui_spread_set_cell(ss_id, 4 ,count, 1, str_from_real(r_value(3)))
            ui_spread_set_cell(ss_id, 5 ,count, 1, str_from_real(r_value(4)))
            ui_spread_set_cell(ss_id, 6 ,count, 1, str_from_real(r_value(5)))
            ui_spread_set_cell(ss_id, 7 ,count, 1, str_from_real(r_value(6)))
            ui_spread_set_cell(ss_id, 8 ,count, 1, str_from_real(r_value(7)))
            ui_spread_set_cell(ss_id, 9 ,count, 1, str_from_real(r_value(8)))
            ui_spread_set_cell(ss_id, 10 ,count, 1, str_from_real(r_value(9)))
            ui_spread_set_cell(ss_id, 11 ,count, 1, ElementList)
		end for
    end for
		
	text_close(f_id, "")
		
END FUNCTION
*/

FUNCTION spread_cb(status, from_c, from_r, to_c, to_r, layer)
	string status[]
	integer from_c, from_r, to_c, to_r, layer
	string cell_data[40]
	
	if( (from_c == to_c) && (from_r == to_r)) then
		ui_spread_get_cell(ss_id, from_c, from_r, 1, cell_data)
		ui_wid_set(input_dbox, "value", cell_data)
	else
		ui_wid_set(input_dbox, "value", " ")
	end if
	
END FUNCTION /* spread_cb */

FUNCTION input_box(value)

string value[]

integer i, j
$string data
string cell_data[40]
integer from_col, from_row, to_col, to_row, layer

ui_spread_get_selected(ss_id, from_col, from_row, to_col, to_row, layer)

if(value == "CR") then
	ui_wid_get(input_dbox, "value", cell_data)
	$cell_data = str_from_real(data)
	$cell_data = data
	for( i= from_col to to_col)
		for( j = from_row to to_row)
			ui_spread_set_cell(ss_id, i, j, layer, cell_data)
		end for
	end for
end if

END FUNCTION /* input box */


FUNCTION cb_Apply()

ui_form_hide("UI_InputDataView")
ui_form_delete("UI_InputDataView")
    
END FUNCTION  /* cb_Apply */

FUNCTION Write_Input_Data()

END FUNCTION

END CLASS