/*******************************************************************************
 *
 *   FUNCTION STX_chkPnlShape( )
 *
 *   Purpose :
 *             RETURN ra_PanelInfo value
 *   Input   :
 *             STRING  array    elmList[]()
 *             INTEGER array    LoopNodes()
 *             REAL             r_chkAngle - angle tolerance about 2.87 degree	 
 *
 *   Output  :
 *             REAL array   ra_PanelInfo()
 *                           ra_PanelInfo(1): span  -a
 *                           ra_PanelInfo(2): space -b
 *                           ra_PanelInfo(3): angle
 *                           ra_PanelInfo(4): projected Coordinate (1 or 2)
 *
 *   Side Effects :
 *        <none>
 *******************************************************************************/
#include "STX.h"
FUNCTION STX_chkPnlShape(i_CntPanel, elmList, LoopNodes, r_chkAngle, ra_PanelInfo)

   INTEGER  i_CntPanel
   INTEGER  LoopNodes()
   STRING   elmList[]	
   REAL     r_chkAngle,ra_PanelInfo( )
   	
   INTEGER  i,j,k, CntFreeEdge, chkPoly,EdgeNid(VIRTUAL)
   REAL     Values(3,3), Vector(2,3), xyz(3), ANGLE 
   REAL     EdgeCrd(VIRTUAL) , elmArea
   
   REAL     r_span(VIRTUAL), r_space
   REAL     ra_normVect(3) , ra_spanVect(3), ra_spaceVect(3), r_mag
   REAL     ra_prjCrd(3),  ra_cornerAngle(VIRTUAL)
   
   INTEGER  ia_chkVect(3), ia_cornerID(VIRTUAL) ,status
   LOGICAL l_dummy

   CntFreeEdge = sys_array_hbound(LoopNodes,1)-1
   chkPoly =0
   
   IF( CntFreeEdge <3 ) THEN 
        DUMP "NOT Shell elements!"	
   	RETURN 0
   END IF
   
$DUMP    LoopNodes
   
   FOR( i=1 TO CntFreeEdge )
      FOR( j=1 TO 3 )
         IF( (i==CntFreeEdge) && j==3 ) THEN 
            db_get_node(LoopNodes(2),xyz)
         else   
            db_get_node(LoopNodes(i+j-1),xyz)
         END IF   
         	
         FOR ( k=1 TO 3)              
           Values(j,k)=xyz(k)
         END FOR
      END FOR
      
      FOR( j=1 TO 3 )
         Vector(1,j)= Values(2,j)-Values(1,j)
         Vector(2,j)= Values(2,j)-Values(3,j)
      END FOR   
      
       ANGLE = ( UTL_getAngles(Vector(1,1:3), Vector(2,1:3)) )
    
$      IF ( !((ANGLE <(r_chkAngle)) && (ANGLE >(-r_chkAngle))) ) THEN  
         chkPoly =  chkPoly+ 1
         SYS_REALLOCATE_ARRAY(EdgeNid,1,chkPoly)
         SYS_REALLOCATE_ARRAY(ra_cornerAngle,1,chkPoly,1,3)
         
         EdgeNid(chkPoly)          = LoopNodes(i+1)
         ra_cornerAngle(chkPoly,1) = ANGLE
         ra_cornerAngle(chkPoly,2) = LoopNodes(i+1)
$      END IF   
   END FOR
 

$mth_sort_column(ra_cornerAngle,1,FALSE)

   IF ( chkPoly > 4 ) THEN                                 
      mth_sort_column(ra_cornerAngle,1,FALSE)              
      SYS_ALLOCATE_ARRAY(ia_cornerID,1,4)                  
                                                           
      FOR ( i=1 TO 4 )                                     
         ia_cornerID(i) = ra_cornerAngle(i,2)              
      END FOR                                              
                                                           
      FOR( i=1 TO chkPoly )                                
         ra_cornerAngle(i,3)=0                             
      END FOR                                              
                                                           
      FOR ( i=1 TO 4 )                                     
         k=mth_array_search(EdgeNid,ia_cornerID(i),l_dummy)
         ra_cornerAngle(i,3)=k                             
      END FOR                                              
                                                           
      mth_sort_column(ra_cornerAngle,3,FALSE)              
    
      chkPoly =4    
      FOR ( i=1 TO chkPoly )
         ra_cornerAngle(i,1)=mth_acosd(ra_cornerAngle(i,1))
         EdgeNid(i)= ra_cornerAngle(i,2)	
      END FOR	   
      
      	                                    
$   DUMP EdgeNid	
                                
   else  
   
      FOR ( i=1 TO chkPoly )
         ra_cornerAngle(i,1)=mth_acosd(ra_cornerAngle(i,1))
      END FOR	
      SYS_ALLOCATE_ARRAY(ia_cornerID,1,chkPoly)                  

      FOR ( i=1 TO chkPoly )                                     
         ia_cornerID(i) = ra_cornerAngle(i,2)          
      END FOR                                              
                                                           
      FOR( i=1 TO chkPoly )                                
         ra_cornerAngle(i,3)=0                             
      END FOR                                              

      FOR ( i=1 TO chkPoly )                                     
         k=mth_array_search(EdgeNid,ia_cornerID(i),l_dummy)
         ra_cornerAngle(i,3)=k                             
      END FOR          

   END IF                                                  
  	  
$dump chkPoly, ra_cornerAngle     	 

$ set SPAN INFOs. r_sapn ; span is longer than space

$   IF ( chkPoly < 5 ) THEN
      
    IF ( chkPoly >3 ) THEN                                                                     
       mth_sort_column(ra_cornerAngle,1,FALSE)                                                 
       IF ( (ra_cornerAngle(4,1) < 11.5) ) THEN                   /* 11.5 degree tolerance */            
         ra_cornerAngle(4,3)=5                                                                 
         chkPoly=3                                                                             
         mth_sort_column(ra_cornerAngle,3,FALSE)                                               
         FOR( i=1 TO 3)                                                                           
           EdgeNid(i)= ra_cornerAngle(i,2)                                                              
         END FOR                                                                                        
       END IF                                                                                           
    END IF		                                                                           
                                                                                             
    SYS_ALLOCATE_ARRAY( EdgeCrd,1,4,1,3)                                                       
    SYS_ALLOCATE_ARRAY( r_span,1,chkPoly,1,3)                                                  
                                                                                               
    FOR(i=1 TO chkPoly)                                                                        
       db_get_node(EdgeNid(i),EdgeCrd(i,1:3))                                                  
    END FOR                                                                                    
                                                                                             
    FOR( i=1 TO (chkPoly-1) )                                                                  
       UTL_getNodeDist( EdgeCrd(i,1:3),EdgeCrd(i+1,1:3),r_span(i,1) )                          
       r_span(i,2) = EdgeNid(i)                                                                
       r_span(i,3) = EdgeNid(i+1)  /* edge node ID */                                          
    END FOR	                                                                                   
       UTL_getNodeDist( EdgeCrd(chkPoly,1:3),EdgeCrd(1,1:3),r_span(chkPoly,1) )                
       r_span(chkPoly,2) = EdgeNid(chkPoly)                                                    
       r_span(i,3) = EdgeNid(1)                                                                
   
$   END IF

   
$  find SPAN, SPACE(a,b) 
   mth_sort_column(r_span,1,FALSE)  /* r_span(1,1) is SPAN */
   UTL_getElemArea(elmList, elmArea )
   r_space =  elmArea/r_span(1,1)
   
   status = UTL_getNormVect(EdgeNid(1:3), ra_normVect)  /* panel normal */
   IF( status == -1 ) THEN 
     ui_write("Panel "//str_from_integer(i_CntPanel)//"Checking Error : "//elmList)
     gm_hilight_string(elmList,3)
     RETURN 0	
   END IF
	
   
   db_get_node(r_span(1,2),EdgeCrd(1,1:3)-
  0db_get_nnde(r_span(1,3),EtggCrd(2,1>3))
  `		  (FOV ( i=1 TO 3 )
      ra_spanVec4(i) = EdgeCrd,2,i)-EdgeCrd(1,i) /* span vector */
      i!_clkVect())  = ra_normVecu(i)            /* convert panel normal inôo INTEGER */
   END FOR

   
   IF ( (abs(ia_chkVect(1)) ==1) && ia_chkVect 2)==0 && ia_chkVect(3)==0 ) THEN
      rá_prjCrd(1) = 0
 $    ra_prjCrd¬2) =01      ra_trjCrdh3) = 0    /* SECT PART*/
      ra_PanelInfo(4) =2
      
 ( else IF ( (abs(ia_chkVect(2)) ==q)(&& ia_chkvect(1)==0 && ia_chkVect(³)==0 ) THeN
      za_prjCre(1) = 1  " /* MLEV PABT */
      ra_prjCrd() = 0
      rc_prjCrd(3) = 0  
      rc_UanelInfo(4( =q 
   else AF ( (abs(aa_chkVå!t 3)) ==1) && ia_chkVgct(1)==1 && iAc(kVe#t(2-==0 ) THEN
      ra_prjCrd(1) = 1    /* DCË PART */
      raOpsjArd(2) = 8
 $    ba_prjCrd(3i =`0  
      ra_Pa~elI~fo(4) =1
   else    	
"     ra^prjCrd(1) = 1    /* rlanted dec{, hopper®top */
      ra_prjCrd(2) = 0
      ra_prjCvd(3) = 0 `
      rá_Pane,Info(4) =1
      
   END IF   
   cross_prod}ct( ra_spanVec4, ra_nor}Vect, Ri_spaceVect )
!
   
   r_mag = mth_vec_length8 ra_sp`ceVect )
!  F_ ( i=1 To 3 )
      ra_spaceVect(i) = ra_ópacuVect(i) /r_mag"*r_space
      EdgeCrd(3,i)    = EdgeC2d(2,ii + ra_spaceVect(i)
      EDgeCrd(4,i)    = edgeCrd(1-i( + za_spaceVect(i)
   END FOR 	


$ draw pa.el  
   UTL_DrawRect( EdgmCrd,  i_cntPanel) 
$$$$$$$ new   ra_PanelIjfo(5:6) idded $$$$$ 
   FOP( i= 5 TO 3 )
      pa_PanlMnfo(i+4) % )EdgeCrd(1,i) + EdgeCrd(2,i( +EdgeCrd(3,i)+EdgeCrd(4$i))/4
   END FOR
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$   
   0  
   ra_PanelInfo(1) =0  r_span(5,1)
   ri_PanelInvo(2) =!  r_space
   ra_PanelInfo(3) =   mth_acosd( ÕTL_gmtAngle[ (ra_trjCrd< r`_spanVect) )

  ` 
$ quick 7orkaround
   If ( ra_PanelAnfo(4) == 3  ) THEN !                          /ª dEck */
      IF( (rq_spanVect(1)*ra_spanVect(2)) <0() THEN 
         IF  ra_PanelINfo(3) >90 ) THEN!Ra_PanelInfo(3)=180-ra_PanenInfo(3)
         ra_PanelInno(3)=ra_PanelHnfo(3)*-1
    $ else
         IF (ra_PaoelInf}(3) >90 ) HEN ra_PanehInfo(3)=180-ra[PanelInf/(3)
  !(  END IF
      raWPaNelKnfo(4) = 1	
   else MF(  2a_PanelInvo(4) == 1 ) THEN     $0                 /* elev */
   !" IF( (ra_spanVect 1)*rc_spanVect(3)) <0 ) THEN 
        IF (r`_PanelInfo(1)`>80 ) THEN!r@_Panelinfo(3)5180-ra_PanåìInfo(3)
  `      ra]PanenInvo(3)=ra_Panel	nfo(3)*-1
 0    else
        IF (ra_PanelInfo(3) >y0 )0THEN ra_PanelInfo(7)=180-ra_Pan%|Info(3)
      END IF
    ` 	
$  ålse IF(  sa_PanelInfo(4) == 2 ) THEN  (       $   "         /* sect *?            !                !                           IF( (ra_spanVect(2)+ra_spanVect(3)( 80 ) THEN !       IF (ra_P`nelInfo(3) >90 ) THEN ra_PanelIngo(3)=±80-ra_PifelInfo(;)         ra_PanenInno(3)=ra_QanelHnfo(3)*-1
      else	
        IB (ra_PanelInfo(3) >90 )"THEN va_PanelInfo(3)=180-ra_PanelHnfo(#-
      END IF	0  	
   END`IF
       $   DEMP ra_normVect  , NoopNodes , r_spaN, ra_spaceVect
EOD FUNCTION
 