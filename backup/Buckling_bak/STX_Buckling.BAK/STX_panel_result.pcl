#define CLASSNAME         STX_panel_result
#define CLASSNAME_QUOTED "STX_panel_result"

CLASS CLASSNAME

    CLASSWIDE STRING   Data[512](VIRTUAL)
    CLASSWIDE INTEGER  count
    CLASSWIDE STRING   text_data[512](VIRTUAL)
    CLASSWIDE STRING   class_name[32]

FUNCTION readResult(s_resData)
    STRING  s_resData[]
     
     class_name = STX_buckling.getClass()
     IF ( class_name == "LR") THEN
        CLASSNAME.LR_readResult(s_resData)
     ELSE IF( class_name == "DNV" )THEN
        CLASSNAME.DNV_readResult(s_resData)
     ELSE
        CLASSNAME.RINA_readResult(s_resData)
     END IF
		
END FUNCTION

FUNCTION filterResult(ia_lcIDs)
   
    INTEGER  ia_lcIDs(), i_row, i_col, i_cntSelLc, i_cntLc, i_cnt, i_cntPnl, i_chk ,i,j
    STRING   sa_newData[512](VIRTUAL), sa_crData[512](VIRTUAL)
    REAL     r_max, r_min, r_data
    
    i_cntSelLc = sys_array_hbound(ia_lcIDs,1)
    i_row   = sys_array_hbound(Data,1)
    i_col   = sys_array_hbound(Data,2)
    
$    DUMP i_row, i_col    
    i_cntLc=0
    FOR ( i=1 TO i_row ) cntLC
      IF( str_to_integer(Data(i,1)) ==1 ) THEN 
        i_cntLc +=1
      ELSE
       BREAK cntLC
      END IF
    END FOR
    
    i_cntPnl = i_row/i_cntLc
    SYS_ALLOCATE_ARRAY(sa_newData,1,i_cntPnl*i_cntSelLc,1,i_col)
    SYS_ALLOCATE_ARRAY(sa_crData,1,i_cntPnl,1,i_col)

$DUMP    i_row/i_cntLc*i_cntSelLc
    i_cnt=0
    FOR ( i=1 TO i_row )
      FOR ( j=1 TO i_cntSelLc )
        IF(  ia_lcIDs(j) ==str_to_integer(Data(i,2)) ) THEN
          i_cnt += 1
          sa_newData(i_cnt,1:i_col)=Data(i,1:i_col)
        END IF	
      END FOR
    END FOR
    
    i_cnt=i_chk=0
    
    FOR ( i=1 TO i_cntPnl*i_cntSelLc BY i_cntSelLc )
      i_cnt += 1
      r_max=-1.0E+30
      r_min= 1.0E+30
    
      FOR (j=1 TO i_cntSelLc )
       IF( class_name == "LR" )THEN
       	  r_data=str_to_real(sa_newData(i+j-1,13)) 
   	  IF( r_data < r_min ) THEN 
   	    r_min=r_data
   	    i_chk=j
   	  END IF  
       ELSE IF( class_name == "DNV")THEN
       	  r_data=str_to_real(sa_newData(i+j-1,15)) 
   	  IF( r_data > r_max ) THEN 
   	    r_max=r_data
   	    i_chk=j
   	  END IF         
       ELSE IF( class_name == "RINA")THEN	
       	  r_data=str_to_real(sa_newData(i+j-1,16)) 
   	  IF( r_data > r_max ) THEN 
   	    r_max=r_data
   	    i_chk=j
   	  END IF              
       ELSE	  
       END IF	   
       	
      END FOR
      sa_crData(i_cnt,1:i_col)= sa_newData(i+i_chk-1,1:i_col)	 
    END FOR
    
    SYS_FREE_ARRAY(Data)
    SYS_ALLOCATE_ARRAY(Data,1,i_row/i_cntLc,1,i_col)
    
    Data=sa_crData	
$DUMP sa_newData    

END FUNCTION


FUNCTION saveOutput(s_outFile)
   
   STRING    s_outFile[], fname[32]
   INTEGER   i_col, i_row, fid, i_textRow, i_cntSelList
   WIDGET    listbox
   
   i_textRow = sys_array_hbound(text_data,1)
   i_row = sys_array_hbound(Data,1)
   i_col = sys_array_hbound(Data,2)
 
$   file_build_fname("./",s_outFile,"dat","N",fname)
$   text_open(fname, "NOW",0,0,fid) 
  
   
   
   CLASSNAME.writeRange(s_outFile, Data)
   

END FUNCTION



FUNCTION LR_readResult(s_resData)

    INTEGER fid, status, i
    INTEGER  i_lenLine, i_position
    INTEGER  i_data(2)
    REAL     r_data(16)
    STRING   s_data[512],s_buff[32], s_resData[]

    status =text_open(s_resData//".dat","or",0,0,fid)
    IF( status !=0 ) THEN 
    	DUMP " There is NO report.dat file"
    	return -1
    END IF
    
    text_read_string(fid,s_data,i_lenLine)
    SYS_ALLOCATE_ARRAY(text_data,1,1)
    text_data(1) = s_data
    count  = 1
    WHILE ( str_find_match(s_data,"====") == 0 )
       count += 1
       SYS_REALLOCATE_ARRAY(text_data,1,count)
       text_read_string(fid,s_data,i_lenLine)
       text_data(count) = s_data  
    END WHILE
   	
    count = 0	
    
    
    text_get_position ( fid, i_position )
    	 	
    WHILE ( text_read(fid,"%2I%%16F%",i_data,r_data,"")  == 0 )
        count += 1
        text_read_string(fid,s_data,i_lenLine) 
    END WHILE	
 
   SYS_ALLOCATE_ARRAY( Data, 1,count,1,19 )
 
 
   count=0   
   text_set_position ( fid, i_position )	
   
    WHILE ( text_read(fid,"%2I%%16F%",i_data,r_data,"")  == 0 )

      count += 1
      text_read_string(fid,s_data,i_lenLine)  
      
 

      Data(count,1) = str_from_integer(i_data(1))	
      Data(count,2) = str_from_integer(i_data(2))
      
$      db_get_load_case_title( i_data(2), s_buff )
$      Data(count,2) = s_buff	
      	
      FOR ( i=3 TO 18 )
        str_formatc(s_buff,"%4.2f",r_data(i-2) )
        Data(count,i) = s_buff
      END FOR	

      Data(count,19) = s_data
      
  
    END WHILE
    	

    text_close(fid,"")	

END FUNCTION

FUNCTION DNV_readResult(s_resData)

    INTEGER fid, status, i, i_position
    
    INTEGER  i_lenLine
    
    INTEGER  i_data(2)
    REAL     r_data(19)
    STRING   s_data[512],s_buff[32], s_resData[]

$    status =text_open("report.dat","or",0,0,fid)

    status =text_open(s_resData//".dat","or",0,0,fid)
    IF( status !=0 ) THEN 
    	DUMP " There is NO report.dat file"
    	return -1
    END IF
    
$    SYS_ALLOCATE_ARRAY(text_data,1,13)
$    FOR ( i=1 TO 13 )
$    	text_read_string(fid,s_data,i_lenLine)
$      text_data(i) = s_data
$    END FOR
 
    text_read_string(fid,s_data,i_lenLine)
    SYS_ALLOCATE_ARRAY(text_data,1,1)
    text_data(1) = s_data
    count  = 1 
    WHILE ( str_find_match(s_data,"====") == 0 )
       count += 1
       SYS_REALLOCATE_ARRAY(text_data,1,count)
       text_read_string(fid,s_data,i_lenLine)
       text_data(count) = s_data  
    END WHILE

    count = 0	
    text_get_position ( fid, i_position )
    	 	
    WHILE ( text_read(fid,"%2I%%19F%",i_data,r_data,"")  == 0 )
        count += 1
        text_read_string(fid,s_data,i_lenLine) 
    END WHILE	
    SYS_ALLOCATE_ARRAY( Data, 1,count,1,22 )

    text_set_position ( fid, i_position )		
    count = 0	
    WHILE ( text_read(fid,"%2I%%19F%",i_data,r_data,"")  == 0 )
      
      count += 1
      text_read_string(fid,s_data,i_lenLine)  
      
$      SYS_REALLOCATE_ARRAY( Data, 1,count,1,22 )
      
      Data(count,1) = str_from_integer(i_data(1))
      Data(count,2) = str_from_integer(i_data(2))
      	
      FOR ( i=3 TO 21 )
        str_formatc(s_buff,"%4.2f",r_data(i-2) )
        Data(count,i) = s_buff
      END FOR	
      	
      Data(count,22) = s_data
  
    END WHILE
	
    text_close(fid,"")	

END FUNCTION

FUNCTION RINA_readResult(s_resData)

    INTEGER fid, status, i, i_position
    
    INTEGER  i_lenLine
    
    INTEGER  i_data(2)
    REAL     r_data(22)
    STRING   s_data[512],s_buff[32], s_resData[]

    status =text_open(s_resData//".dat","or",0,0,fid)

    IF( status !=0 ) THEN 
    	DUMP " There is NO report.dat file"
    	return -1
    END IF
    
$    SYS_ALLOCATE_ARRAY(text_data,1,13)
$    FOR ( i=1 TO 13 )
$    	text_read_string(fid,s_data,i_lenLine)
$      text_data(i) = s_data
$    END FOR
 
    text_read_string(fid,s_data,i_lenLine)
    SYS_ALLOCATE_ARRAY(text_data,1,1)
    text_data(1) = s_data
    count  = 1 
    WHILE ( str_find_match(s_data,"====") == 0 )
       count += 1
       SYS_REALLOCATE_ARRAY(text_data,1,count)
       text_read_string(fid,s_data,i_lenLine)
       text_data(count) = s_data  
    END WHILE
   
    count = 0	
    text_get_position ( fid, i_position )
    	 	
    WHILE ( text_read(fid,"%2I%%22F%",i_data,r_data,"")  == 0 )
        count += 1
        text_read_string(fid,s_data,i_lenLine) 
    END WHILE	
    SYS_ALLOCATE_ARRAY( Data, 1,count,1,25 )
   
   
    text_set_position ( fid, i_position )		
    count = 0	
    WHILE ( text_read(fid,"%2I%%22F%",i_data,r_data,"")  == 0 )
      
      count += 1
      text_read_string(fid,s_data,i_lenLine)  
      
$      SYS_REALLOCATE_ARRAY( Data, 1,count,1,25 )
      
      Data(count,1) = str_from_integer(i_data(1))
      Data(count,2) = str_from_integer(i_data(2))
      	
      FOR ( i=3 TO 24 )
        str_formatc(s_buff,"%4.2f",r_data(i-2) )
        Data(count,i) = s_buff
      END FOR	
      	
      Data(count,25) = s_data
  
    END WHILE
	
    text_close(fid,"")	

END FUNCTION 

FUNCTION shwResult()

   STX_result_table.InterFace( class_name,count, Data )
$   SYS_FREE_ARRAY(Data)
$   SYS_FREE_ARRAY(text_data)	
	
END FUNCTION

FUNCTION rangeResult(range1, range2)

   REAL range1, range2
   REAL rng1, rng2
   STRING rngData[512](VIRTUAL)
   INTEGER i,j,col
   
   IF ( range2-range1 >= 0 ) THEN
   	rng1 = range1
   	rng2 = range2
   ELSE
   	rng1 = range2
   	rng2 = range1
   END IF	
   
   j=0
   count = sys_array_hbound(Data, 1)
   col   = sys_array_hbound(Data, 2)
   
   SYS_ALLOCATE_ARRAY(rngData,1,count,1,col)
   
   IF ( class_name == "LR") THEN
      FOR (i=1 TO count)
        IF (str_to_real(Data(i,13)) >= rng1 && str_to_real(Data(i,13))<= rng2 ) THEN
          j += 1
          rngData(j,1:col) = Data(i,1:col)
   	END IF
      END FOR
      	

   ELSE IF( class_name == "DNV" )THEN
      FOR (i=1 TO count)
$        IF ( (str_to_real(Data(i,14)) >= rng1 && str_to_real(Data(i,14)) <= rng2)  ||  @
$             (str_to_real(Data(i,15)) >= rng1 && str_to_real(Data(i,15)) <= rng2) ) THEN
         IF ( (str_to_real(Data(i,15)) >= rng1 && str_to_real(Data(i,15)) <= rng2) ) THEN
           j += 1
           rngData(j,1:col) = Data(i,1:col)
   	 END IF
      END FOR

   ELSE
      FOR (i=1 TO count)
$        IF ( (str_to_real(Data(i,14)) >= rng1 && str_to_real(Data(i,14)) <= rng2)  ||  @
$             (str_to_real(Data(i,15)) >= rng1 && str_to_real(Data(i,15)) <= rng2)  ||  @
$             (str_to_real(Data(i,16)) >= rng1 && str_to_real(Data(i,16)) <= rng2) ) THEN
        IF ( (str_to_real(Data(i,16)) >= rng1 && str_to_real(Data(i,16)) <= rng2) ) THEN        
       	  j += 1
       	  rngData(j,1:col) = Data(i,1:col)
   	  END IF
   	END FOR
   END IF   
$   DUMP rngData
$   DUMP j
	
 
   IF ( j== 0) THEN                                                           	
  	  user_message("WARN", 100001, "Buckling Assessment", "out of range.")     
	  RETURN -1		                                                   
   Else                                                                       

      count = j                                                            
      SYS_ALLOCATE_ARRAY( Data, 1,j, 1,col)                                
$      FOR( i=1 TO count)                                                
$      	FOR ( j=1 TO col)                                               
$          Data(i,j) = rngData(i,j)                                      
$        END FOR                                                        
$      END FOR  	                                                        
       Data(1:j,1:col) = rngData(1:j,1:col) 	
   END IF                                                                  
 

   RETURN 0	                                                        
		 	
END FUNCTION

FUNCTION writeRange(s_fName, rngData)

    INTEGER num_row
    STRING  rngData[]()
    STRING   fname[512]
    INTEGER  fid
    INTEGER  text_count,i,j,col ,i_cntSelList, i_lcID
    INTEGER  i_data(VIRTUAL)
    REAL     r_data(VIRTUAL)    
    STRING   elm_list[512], s_fName[], s_lc[80](VIRTUAL), s_lctitle[80]

    file_build_fname("./",s_fName,"dat","N",fname)
    text_open(fname, "NOW",0,0,fid)

$    text_count = sys_array_hbound(text_data, 1)
$    FOR (i=1 TO text_count)
$       text_write_string(fid,text_data(i))
$	 END FOR

    text_count = sys_array_hbound(text_data, 1)
    

    FOR (i=1 TO text_count-5)
       text_write_string(fid,text_data(i))
    END FOR
    
    num_row = sys_array_hbound(rngData,1)
    text_write(fid,"Total number of Panels   : %I%", num_row, 1., "")

    FOR (i=text_count-3 TO text_count-2 )
       text_write_string(fid,text_data(i))
    END FOR
    	
    WIDGET listbox_01
    listbox_01 = sys_class_get("STX_buckling_fringe","listbox_01")
    
    ui_wid_get ( listbox_01 , "NSELECTED", i_cntSelList )
    SYS_ALLOCATE_ARRAY(s_lc,    1,i_cntSelList)
    ui_wid_get ( listbox_01 ,  "VALUE", s_lc )
    
     
    j=	sys_array_hbound(s_lc,1)
    text_write_string(fid,"# LCID : Title ")		
    FOR( i=1 TO j )
       s_lctitle = str_token(s_lc(i),":",2)
       db_get_load_case_id(s_lctitle,i_lcID)
       text_write_string(fid," "//str_from_integer(i_lcID)//" : "//str_token(s_lc(i),":",2))		
    END FOR	
    text_write_string(fid,"")
    				

    FOR (i=text_count-1 TO text_count )
       text_write_string(fid,text_data(i))
    END FOR
	 	  
    col = sys_array_hbound(rngData, 2)
    SYS_ALLOCATE_ARRAY(i_data,1,2)
    SYS_ALLOCATE_ARRAY(r_data,1,col-3)


    FOR (i=1 TO num_row)
       i_data(1) = str_to_integer( rngData(i,1) )
       i_data(2) = str_to_integer( rngData(i,2) )

       FOR (j=1 TO col-3)
          r_data(j) = str_to_real( rngData(i,j+2) )
       END FOR
       	
       elm_list= rngData(i,col)

       IF ( class_name == "LR") THEN
   	    text_write(fid,"%2(%I4% )%%5(%F7.2% )%%5(%F6.2% )%%6(%F5.2% )%", i_data, r_data, "")
       ELSE IF ( class_name == "DNV") THEN
          text_write(fid,"%2(%I4% )%%F5.2% %2(%F8.2% )%%2(%F7.2% )%%6(%F6.2% )%%8(%F5.2% )%", i_data, r_data, "")
       ELSE
          text_write(fid,"%2(%I4% )%%5(%F7.2% )%%6(%F6.2% )%%3(%F5.2% )%%8(%F5.2% )%", i_data, r_data, "")
       END IF
       
$       text_write_string(fid, elm_list)
           	    
   END FOR   	

$   text_write_string(fid, "#End Data")
   text_close(fid,"")
	
END FUNCTION		

FUNCTION show_resultData()

     IF ( class_name == "LR") THEN
        CLASSNAME.LR_show_resultData()
     ELSE IF( class_name == "DNV" )THEN
        CLASSNAME.DNV_show_resultData()
     ELSE
        CLASSNAME.RINA_show_resultData()
     END IF	

END FUNCTION

FUNCTION LR_show_resultData()
   
   STRING subTlt[160]
   REAL r_data, dum(7)
   STRING resData[512](VIRTUAL)
   INTEGER rowNum, colNum, i
   LOGICAL chkrange   
   

   UTL_markID.orgColor()

   subTlt = STX_buckling_fringe.get_frg_title()
   count  = sys_array_hbound(Data,1)
   
   IF ( subTlt == "Initial,Thickness" ) THEN
      FOR ( i=1 TO count )
      	UTL_markID.setResText(true)
      	r_data = str_to_real (Data(i,5))
      	UTL_markID.setResTextData(r_data )
   	STX_getPanelEdge(1,Data(i,19),dum)   
      END FOR
   END IF
   	
   IF ( subTlt == "Stress,xx" ) THEN
      FOR ( i=1 TO count )
      	UTL_markID.setResText(true)
      	r_data = str_to_real (Data(i,8))
      	UTL_markID.setResTextData(r_data )
   	   STX_getPanelEdge(1,Data(i,19),dum)   
      END FOR
   END IF
   	
   IF ( subTlt == "Stress,yy" ) THEN
      FOR ( i=1 TO count )
      	UTL_markID.setResText(true)
      	r_data = str_to_real (Data(i,9))
      	UTL_markID.setResTextData(r_data )
   	   STX_getPanelEdge(1,Data(i,19),dum)   
      END FOR
   END IF
   	
   IF ( subTlt == "Stress,xy" ) THEN
      FOR ( i=1 TO count )
      	UTL_markID.setResText(true)
      	r_data = str_to_real (Data(i,10))
      	UTL_markID.setResTextData(r_data )
   	   STX_getPanelEdge(1,Data(i,19),dum)   
      END FOR
   END IF
   	
   IF ( subTlt == "Stress,ed" ) THEN
      FOR ( i=1 TO count )
      	UTL_markID.setResText(true)
      	r_data = str_to_real (Data(i,11))
      	UTL_markID.setResTextData(r_data )
   	   STX_getPanelEdge(1,Data(i,19),dum)   
      END FOR
   END IF
   	
   IF ( subTlt == "Stress,ec" ) THEN
      FOR ( i=1 TO count )
      	UTL_markID.setResText(true)
      	r_data = str_to_real (Data(i,12))
      	UTL_markID.setResTextData(r_data )
   	   STX_getPanelEdge(1,Data(i,19),dum)   
      END FOR
   END IF
   	
   IF ( subTlt == "Buckng,Factor" ) THEN
      FOR ( i=1 TO count )
      	UTL_markID.setResText(true)
      	r_data = str_to_real (Data(i,13))
      	UTL_markID.setResTextData(r_data )
   	   STX_getPanelEdge(1,Data(i,19),dum)   
      END FOR
   END IF
   	
   IF ( subTlt == "Thickness,Increment" ) THEN
      FOR ( i=1 TO count )
      	UTL_markID.setResText(true)
      	r_data = str_to_real (Data(i,15))
      	UTL_markID.setResTextData(r_data )
   	   STX_getPanelEdge(1,Data(i,19),dum)   
      END FOR
   END IF
   	
   IF ( subTlt == "Length,Diminishment" ) THEN
      FOR ( i=1 TO count )
      	UTL_markID.setResText(true)
      	r_data = str_to_real (Data(i,17))
      	UTL_markID.setResTextData(r_data )
   	   STX_getPanelEdge(1,Data(i,19),dum)   
      END FOR
   END IF
   	


   
$   "Stress,xx""Stress,yy""Stress,xx""Stress,xy""Stress,ed"
$"Stress,ec" "Buckng,Factor" Thickness,Increment
$
$
$Length,Diminishment
$   
$   
$   UTL_markID.setResTextData(17.5)
$   REAL a(7)
$   STX_getPanelEdge(1,"elm 836 1781 27328",a)   

END FUNCTION

FUNCTION DNV_show_resultData()
   
   STRING subTlt[160]
   REAL r_data, dum(7)
   STRING resData[512](VIRTUAL)
   INTEGER rowNum, colNum, i
   LOGICAL chkrange   
   

   UTL_markID.orgColor()

   subTlt = STX_buckling_fringe.get_frg_title()
   count  = sys_array_hbound(Data,1)
      
   IF ( subTlt == "Initial,Thickness" ) THEN
      FOR ( i=1 TO count )
      	UTL_markID.setResText(true)
      	r_data = str_to_real (Data(i,5))
      	UTL_markID.setResTextData(r_data )
   	   STX_getPanelEdge(1,Data(i,22),dum)   
      END FOR
   END IF
   	
   IF ( subTlt == "Stress,xx" ) THEN
      FOR ( i=1 TO count )
      	UTL_markID.setResText(true)
      	r_data = str_to_real (Data(i,8))
      	UTL_markID.setResTextData(r_data )
   	   STX_getPanelEdge(1,Data(i,22),dum)   
      END FOR
   END IF
   	
   IF ( subTlt == "Stress,yy" ) THEN
      FOR ( i=1 TO count )
      	UTL_markID.setResText(true)
      	r_data = str_to_real (Data(i,9))
      	UTL_markID.setResTextData(r_data )
   	   STX_getPanelEdge(1,Data(i,22),dum)   
      END FOR
   END IF
   	
   IF ( subTlt == "Stress,xy" ) THEN
      FOR ( i=1 TO count )
      	UTL_markID.setResText(true)
      	r_data = str_to_real (Data(i,10))
      	UTL_markID.setResTextData(r_data )
   	   STX_getPanelEdge(1,Data(i,22),dum)   
      END FOR
   END IF
   	
   IF ( subTlt == "Factor,Biaxial1" ) THEN
      FOR ( i=1 TO count )
      	UTL_markID.setResText(true)
      	r_data = str_to_real (Data(i,14))
      	UTL_markID.setResTextData(r_data )
   	   STX_getPanelEdge(1,Data(i,22),dum)   
      END FOR
   END IF
   	
   IF ( subTlt == "Factor,Biaxial2" ) THEN
      FOR ( i=1 TO count )
      	UTL_markID.setResText(true)
      	r_data = str_to_real (Data(i,15))
      	UTL_markID.setResTextData(r_data )
   	   STX_getPanelEdge(1,Data(i,22),dum)   
      END FOR
   END IF
   	
   IF ( subTlt == "Thickness,Increment" ) THEN
      FOR ( i=1 TO count )
      	UTL_markID.setResText(true)
      	r_data = str_to_real (Data(i,16))
      	UTL_markID.setResTextData(r_data )
   	   STX_getPanelEdge(1,Data(i,22),dum)   
      END FOR
   END IF
   	
   IF ( subTlt == "Length,Diminishment" ) THEN
      FOR ( i=1 TO count )
      	UTL_markID.setResText(true)
      	r_data = str_to_real (Data(i,19))
      	UTL_markID.setResTextData(r_data )
   	   STX_getPanelEdge(1,Data(i,22),dum)   
      END FOR
   END IF

END FUNCTION

FUNCTION RINA_show_resultData()
   
   STRING subTlt[160]
   REAL r_data, dum(7)
   STRING resData[512](VIRTUAL)
   INTEGER rowNum, colNum, i
   LOGICAL chkrange   
   

   UTL_markID.orgColor()

   subTlt = STX_buckling_fringe.get_frg_title()
   count  = sys_array_hbound(Data,1)
      
   IF ( subTlt == "Initial,Thickness" ) THEN
      FOR ( i=1 TO count )
      	UTL_markID.setResText(true)
      	r_data = str_to_real (Data(i,5))
      	UTL_markID.setResTextData(r_data )
   	   STX_getPanelEdge(1,Data(i,25),dum)   
      END FOR
   END IF
   	
   IF ( subTlt == "Stress,xx" ) THEN
      FOR ( i=1 TO count )
      	UTL_markID.setResText(true)
      	r_data = str_to_real (Data(i,8))
      	UTL_markID.setResTextData(r_data )
   	   STX_getPanelEdge(1,Data(i,25),dum)   
      END FOR
   END IF
   	
   IF ( subTlt == "Stress,yy" ) THEN
      FOR ( i=1 TO count )
      	UTL_markID.setResText(true)
      	r_data = str_to_real (Data(i,9))
      	UTL_markID.setResTextData(r_data )
   	   STX_getPanelEdge(1,Data(i,25),dum)   
      END FOR
   END IF
   	
   IF ( subTlt == "Stress,xy" ) THEN
      FOR ( i=1 TO count )
      	UTL_markID.setResText(true)
      	r_data = str_to_real (Data(i,10))
      	UTL_markID.setResTextData(r_data )
   	   STX_getPanelEdge(1,Data(i,25),dum)   
      END FOR
   END IF
   	
   IF ( subTlt == "Factor,Comp&Shear1" ) THEN
      FOR ( i=1 TO count )
      	UTL_markID.setResText(true)
      	r_data = str_to_real (Data(i,14))
      	UTL_markID.setResTextData(r_data )
   	   STX_getPanelEdge(1,Data(i,25),dum)   
      END FOR
   END IF
   	
   IF ( subTlt == "Factor,Comp&Shear2" ) THEN
      FOR ( i=1 TO count )
      	UTL_markID.setResText(true)
      	r_data = str_to_real (Data(i,15))
      	UTL_markID.setResTextData(r_data )
   	   STX_getPanelEdge(1,Data(i,25),dum)   
      END FOR
   END IF
   	
   IF ( subTlt == "Factor,Bicomp&Shear" ) THEN
      FOR ( i=1 TO count )
      	UTL_markID.setResText(true)
      	r_data = str_to_real (Data(i,16))
      	UTL_markID.setResTextData(r_data )
   	   STX_getPanelEdge(1,Data(i,25),dum)   
      END FOR
   END IF
   	
   IF ( subTlt == "Thickness,Increment" ) THEN
      FOR ( i=1 TO count )
      	UTL_markID.setResText(true)
      	r_data = str_to_real (Data(i,17))
      	UTL_markID.setResTextData(r_data )
   	   STX_getPanelEdge(1,Data(i,25),dum)   
      END FOR
   END IF
   	
   IF ( subTlt == "Length,Diminishment" ) THEN
      FOR ( i=1 TO count )
      	UTL_markID.setResText(true)
      	r_data = str_to_real (Data(i,21))
      	UTL_markID.setResTextData(r_data )
   	   STX_getPanelEdge(1,Data(i,25),dum)   
      END FOR
   END IF

END FUNCTION

FUNCTION dispPnl()

   INTEGER i_row, i_col, i_pnlID, i
   REAL    r_dum(7)
     
   i_row = sys_array_hbound(Data,1)
   i_col = sys_array_hbound(Data,2)
   UTL_markID.orgColor()

   FOR( i=1 TO i_row)
      i_pnlID = str_to_integer(Data(i,1))
      STX_getPanelEdge(i_pnlID,Data(i,i_col),r_dum)   
   END FOR   

END FUNCTION

END CLASS	
